name: Agent Workflow

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run TypeScript compiler check
        run: npx tsc --noEmit

      - name: Run unit tests
        run: npm run test

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Create modified Playwright config for CI
        run: |
          # Create a temporary Playwright config that reuses existing servers in CI
          cat > playwright.ci.config.ts << 'EOL'
          import { defineConfig, devices } from '@playwright/test';

          export default defineConfig({
            testDir: './e2e/tests',
            fullyParallel: true,
            forbidOnly: !!process.env.CI,
            retries: process.env.CI ? 2 : 0,
            workers: process.env.CI ? 1 : undefined,
            reporter: process.env.CI ? 'dot' : [['html', { open: 'never' }], ['list']],
            use: {
              baseURL: 'http://localhost:5173',
              trace: 'on-first-retry',
              headless: true,
              launchOptions: {
                args: ['--no-sandbox', '--disable-setuid-sandbox'],
              },
              viewport: { width: 1280, height: 800 },
              actionTimeout: 15000,
              navigationTimeout: 15000,
              // Only capture screenshots on failure
              screenshot: 'only-on-failure',
            },
            projects: [
              {
                name: 'chromium',
                use: { ...devices['Desktop Chrome'] },
              },
            ],
            webServer: {
              command: 'npm run dev',
              url: 'http://localhost:5173',
              reuseExistingServer: true, // Always reuse existing server
            },
          });
          EOL

      - name: Start dev server
        run: |
          # Start the dev server in the background
          npm run dev &
          # Store the process ID to kill it later
          echo "DEV_SERVER_PID=$!" >> $GITHUB_ENV
          # Give the server a moment to start
          sleep 10

      - name: Run E2E tests
        timeout-minutes: 10
        run: |
          # Run the E2E tests with the modified config and minimal logging
          npx playwright test --config=playwright.ci.config.ts --reporter=dot || {
            echo "::error::E2E tests failed"
            exit 1
          }

      - name: Create modified visual regression config for CI
        run: |
          # Create a temporary visual regression config that reuses existing servers in CI
          cat > playwright.visual.ci.config.ts << 'EOL'
          import { defineConfig, devices } from '@playwright/test';
          import path from 'path';

          export default defineConfig({
            testDir: './e2e/visual-tests',
            fullyParallel: false,
            forbidOnly: !!process.env.CI,
            retries: process.env.CI ? 1 : 0,
            workers: 1,
            reporter: process.env.CI ? 'dot' : [['html', { open: 'never' }], ['list']],
            expect: {
              toMatchSnapshot: {
                maxDiffPixels: 100,
                threshold: 0.2,
              },
            },
            use: {
              baseURL: 'http://localhost:5173',
              trace: 'on-first-retry',
              headless: true,
              launchOptions: {
                args: ['--no-sandbox', '--disable-setuid-sandbox'],
              },
              viewport: { width: 1280, height: 800 },
              actionTimeout: 15000,
              navigationTimeout: 15000,
              screenshot: 'only-on-failure',
            },
            projects: [
              {
                name: 'chromium',
                use: {
                  ...devices['Desktop Chrome'],
                },
              },
            ],
            snapshotPathTemplate: '{testDir}/{testFileDir}/{testFileName}-{arg}{ext}',
            webServer: {
              command: 'npm run dev',
              url: 'http://localhost:5173',
              reuseExistingServer: true, // Always reuse existing server
            },
            outputDir: path.join(__dirname, 'e2e/visual-tests/results'),
          });
          EOL

      - name: Run visual regression tests
        timeout-minutes: 5
        run: |
          # Run visual regression tests with the modified config and minimal logging
          npx playwright test --config=playwright.visual.ci.config.ts --reporter=dot || {
            echo "::error::Visual regression tests failed"
            exit 1
          }

      - name: Stop dev server
        if: always()
        run: |
          if [ -n "$DEV_SERVER_PID" ]; then
            echo "Stopping dev server (PID: $DEV_SERVER_PID)"
            kill $DEV_SERVER_PID || true
          fi

      - name: Upload visual test artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: visual-test-results
          path: |
            e2e/visual-tests/snapshots
            e2e/visual-tests/diffs
            e2e/visual-tests/results

      - name: Upload E2E test screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-screenshots
          path: e2e-screenshots/
          retention-days: 7

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-reports
          path: |
            playwright-report/
            coverage/
          retention-days: 7

  build:
    runs-on: ubuntu-latest
    needs: lint-and-test
    timeout-minutes: 5

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7
