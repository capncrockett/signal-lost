name: Cross-Agent Validation

on:
  pull_request:
    branches: [develop]
    types: [opened, synchronize, reopened, ready_for_review]
    paths:
      - 'godot_project/scripts/**'
      - 'godot_project/scenes/**'
      - 'godot_project/tests/**'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  validate-contracts:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Godot
        uses: chickensoft-games/setup-godot@v1
        with:
          version: 4.2.1
          use-dotnet: false

      - name: Determine agent type
        id: agent-type
        run: |
          if [[ "${{ github.head_ref }}" == feature/alpha/* ]]; then
            echo "agent=alpha" >> $GITHUB_OUTPUT
            echo "This is an Alpha agent PR"
          elif [[ "${{ github.head_ref }}" == feature/beta/* ]]; then
            echo "agent=beta" >> $GITHUB_OUTPUT
            echo "This is a Beta agent PR"
          elif [[ "${{ github.head_ref }}" == cleanup/* ]]; then
            echo "agent=cleanup" >> $GITHUB_OUTPUT
            echo "This is a cleanup PR"
          else
            echo "agent=unknown" >> $GITHUB_OUTPUT
            echo "Unknown agent type"
          fi

      - name: Validate C# compilation
        id: validate-csharp
        run: |
          echo "Running C# validation..."
          # Create a validation report file
          touch validation-report.md
          echo "# C# Validation Report" >> validation-report.md
          echo "" >> validation-report.md

          # Run dotnet build to check for compilation errors
          cd godot_project
          if dotnet build -v minimal; then
            echo "✅ C# compilation successful" >> ../validation-report.md
          else
            echo "❌ C# compilation errors found" >> ../validation-report.md
            echo "Please fix the C# compilation errors" >> ../validation-report.md
            exit 1
          fi

      - name: Run Godot unit tests
        id: integration-tests
        run: |
          echo "Running Godot unit tests..."
          # Create a test report file
          touch integration-test-report.md
          echo "# Godot Test Report" >> integration-test-report.md
          echo "" >> integration-test-report.md

          # Run tests
          cd godot_project
          chmod +x run_tests.sh
          if ./run_tests.sh >> ../integration-test-report.md 2>&1; then
            echo "✅ Godot tests passed" >> ../integration-test-report.md
          else
            echo "❌ Godot tests failed" >> ../integration-test-report.md
            echo "Please fix the test failures" >> ../integration-test-report.md
            exit 1
          fi

      - name: Generate agent-specific feedback
        id: agent-feedback
        run: |
          echo "Generating agent-specific feedback..."
          # Create a feedback file
          touch agent-feedback.md
          echo "# Agent-Specific Feedback" >> agent-feedback.md
          echo "" >> agent-feedback.md

          if [[ "${{ steps.agent-type.outputs.agent }}" == "alpha" ]]; then
            echo "## Feedback for Agent Alpha" >> agent-feedback.md
            echo "" >> agent-feedback.md
            echo "### Radio System" >> agent-feedback.md
            echo "- Ensure radio system maintains compatibility with message system" >> agent-feedback.md
            echo "- Verify audio system changes don't affect game state handling" >> agent-feedback.md
            echo "" >> agent-feedback.md
            echo "### UI System" >> agent-feedback.md
            echo "- Check that UI changes maintain proper event dispatching" >> agent-feedback.md
            echo "- Ensure pixel-based UI components are consistent" >> agent-feedback.md
          elif [[ "${{ steps.agent-type.outputs.agent }}" == "beta" ]]; then
            echo "## Feedback for Agent Beta" >> agent-feedback.md
            echo "" >> agent-feedback.md
            echo "### Message System" >> agent-feedback.md
            echo "- Ensure message components properly consume signals from the radio system" >> agent-feedback.md
            echo "- Verify message display works with all signal types" >> agent-feedback.md
            echo "" >> agent-feedback.md
            echo "### Game State" >> agent-feedback.md
            echo "- Check that game state changes don't affect radio system functionality" >> agent-feedback.md
            echo "- Ensure event system properly handles audio events" >> agent-feedback.md
          elif [[ "${{ steps.agent-type.outputs.agent }}" == "cleanup" ]]; then
            echo "## Feedback for Cleanup Changes" >> agent-feedback.md
            echo "" >> agent-feedback.md
            echo "### Code Cleanup" >> agent-feedback.md
            echo "- Ensure removed code doesn't break existing functionality" >> agent-feedback.md
            echo "- Verify documentation is updated to reflect the current state" >> agent-feedback.md
            echo "- Consider archiving important code instead of deleting it" >> agent-feedback.md
          else
            echo "## General Feedback" >> agent-feedback.md
            echo "" >> agent-feedback.md
            echo "- Please use the proper branch naming convention:" >> agent-feedback.md
            echo "  - `feature/alpha/*` for Agent Alpha changes" >> agent-feedback.md
            echo "  - `feature/beta/*` for Agent Beta changes" >> agent-feedback.md
            echo "  - `cleanup/*` for cleanup changes" >> agent-feedback.md
          fi

      - name: Check for other agent's approval
        id: check-approval
        run: |
          # Get the PR details
          PR_DETAILS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews")

          # Check if the PR has been approved by the other agent
          if [[ "${{ steps.agent-type.outputs.agent }}" == "alpha" ]]; then
            # Check for Beta agent approval
            if echo "$PR_DETAILS" | jq -e '.[] | select(.user.login=="CSL-Beta" and .state=="APPROVED")' > /dev/null; then
              echo "approved_by_beta=true" >> $GITHUB_OUTPUT
              echo "PR approved by Beta agent"
            else
              echo "approved_by_beta=false" >> $GITHUB_OUTPUT
              echo "PR not yet approved by Beta agent"
            fi
          elif [[ "${{ steps.agent-type.outputs.agent }}" == "beta" ]]; then
            # Check for Alpha agent approval
            if echo "$PR_DETAILS" | jq -e '.[] | select(.user.login=="capncrockett" and .state=="APPROVED")' > /dev/null; then
              echo "approved_by_alpha=true" >> $GITHUB_OUTPUT
              echo "PR approved by Alpha agent"
            else
              echo "approved_by_alpha=false" >> $GITHUB_OUTPUT
              echo "PR not yet approved by Alpha agent"
            fi
          fi

      - name: Create combined report
        run: |
          cat validation-report.md integration-test-report.md agent-feedback.md > combined-report.md

          # Add approval status to the report
          echo "" >> combined-report.md
          echo "## Approval Status" >> combined-report.md
          if [[ "${{ steps.agent-type.outputs.agent }}" == "alpha" ]]; then
            if [[ "${{ steps.check-approval.outputs.approved_by_beta }}" == "true" ]]; then
              echo "✅ This PR has been approved by the Beta agent" >> combined-report.md
            else
              echo "⏳ Waiting for approval from the Beta agent" >> combined-report.md
            fi
          elif [[ "${{ steps.agent-type.outputs.agent }}" == "beta" ]]; then
            if [[ "${{ steps.check-approval.outputs.approved_by_alpha }}" == "true" ]]; then
              echo "✅ This PR has been approved by the Alpha agent" >> combined-report.md
            else
              echo "⏳ Waiting for approval from the Alpha agent" >> combined-report.md
            fi
          fi

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('combined-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
